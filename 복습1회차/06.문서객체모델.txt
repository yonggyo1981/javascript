04. 문서 객체 모델 
Docuemnt Object Model 
브라우저 -> 웹 주소 -> 서버에서 응답 -> html 문서를 수신 
-> DOM Tree 구축 -> DOMContentLoded 이벤트 -> 외부 resource가 로딩(이미지, 내부 프레임, 비디오....) -> Load 이벤트 발생 

DOM Tree 생성 이후 사용이 가능

1. 요소를 선택하는 방법
   1) 아이디로 선택하는 방법 (id - 유일한 값, 1개만 선택 )
		document.getElementById("아이디명")
		
   2) 클래스로 선택하는 방법(class - 복수개 선택) 
		document.getElementsByClassName("클래스명")
		
   3) 태그명으로 선택하는 방법(태그 - 복수개 선택)
		document.getElementsByTagName("태그명")
   
   4) CSS 선택자로 선택하는 방법
		document.querySelector("CSS 선택자") -> 가장 처음에 찾는 1개 요소만 선택 
		document.querySelectorAll("CSS 선택자") -> 매칭 되는 모든 요소를 선택

2. 요소의 속성을 통제하는 메서드
   (선택 이후)
    document	
				.setAttribute("속성명", "값"); // 속성 지정 
				.getAttribute("속성명"); // 속성값 조회
				.removeAttribute("속성명"); // 속성값 제거 
				
   
   기능적으로 이미 정의되어 있는 속성 
	type, name, id, class, value, style .... -> 속성관련 메서드 없이 요소에서 바로 접근이 가능
	요소.type, 요소.name, 요소.value 

	class -> 요소.className 
	
	사용자 정의 속성의 경우
	  - data-속성명으로 사용(O)
	  - 요소.dataset 속성(객체) -> 속성 조회, 삭제(delete), 수정
	  
	  
	클래스 속성을 다루는 객체 
		- 요소.classList 
				.add("클래스명"); -> 클래스명 추라 
				.remove("클래스명"); -> 클래스명 제거
				.toggle("클래스명"); -> 클래스명이 있으면 제거, 없으면 추가
				.contains("클래스명"); -> 클래스명이 포함되어 있는지 여부
				
				
3. 요소의 생성
	document
		.createElement("태그명")
		.createTextNode("텍스트");
		
		
		<div>텍스트</div>  -> <div></div> : createElement, 테스트 ->  createTextNode
										테스트 -> div 자식 요소
										
		부모 요소.appendChild(생성한 요소); // 추가 
		부모 요소.removeChild(제거할 요소); // 제거
        부모 요소.replaceChild(새로운 요소, 변경될 자식 요소); 
		부모요소.insertBefore(추가할 요소, 기준 자식 요소); //  기준 자식 요소 앞에 추가
		
4. 요소에 있는 HTML, TEXT 
	선택요소.innerHTML (HTML)
			-> 값을 읽으면 가져오고, 변경하면 변경내용이 반영 
	
	선택요소.innerText  (텍스트)
			-> 값을 읽으면 가져오고, 변경하면 변경내용이 반영 
			
5. 부모, 자식 요소 선택 
   children  -> 자식 요소 들
   parentElement -> 부모 요소 
   firstElementChild -> 자식 중에서 첫번쨰
   lastElementChild -> 자식 중에서 마지막
   nextElementSibling -> 바로 다음 형제 요소 
   previousElementSibling -> 바로 앞 형제 요소
   childElementCount -> 자식 요소 갯수 
   
6. 이벤트
사용자가 버튼을 클릭하면 -> 클릭 했습니다. 메세지 출력 

add.addEventListener("click", function() {

});

선택한 요소
		.addEventListener("이벤트명", 이벤트 핸들러 함수, 캡쳐링 사용 여부);
		
	
	
		이벤트 핸들러 -> 이벤트명으로 정의된 동작이 발생하면 실행되는 함수 
		이벤트 핸들러 함수의 매개변수는 -> 이벤트 객체( from addEventListener 내부에서 넘겨준 이벤트 객체)
		
		이벤트 객체 -> 이벤트가 발생한 요소에 대한 정보 + 메서드
							- stopPropagation() - 이벤트 전파(버블링) 차단 
							- preventDefault() - 기본 이벤트 동작 차단 
		

이벤트가 발생하는 순서
		가상 상위 Tree 요소에서 이벤트가 발생된 요소까지 찾는 단계 -> 캡쳐링 단계
		이벤트가 실행되는 단계 -> 발생한 요소 -> 상위 요소까지 등록된 이벤트를 모두 실행 -> 버블링 단계
		

이벤트명 -> 클릭이벤트가 가장 많음(70%)
		click  / touch
		dbclick / - 더블 클릭 
		change -> select를 선택 했을때, file을 선택 했을때, text=number -> 수치를 화살표로 변경했을때
		resize -> 브라우저 창의 사이즈를 변경 했을때 
		scroll  -> 스크롤 될때 
		mouseenter -> 요소에 마우가 올라 갔을 때 
		mouseleave  -> 요소에 마우스 커서가 벗어 났을때 
		focus  
		blur 
		keyup - 키를 눌렀다가 뗄때 발생 


window -> on으로 시작하는 메서드 on을 제외하면 이벤트명
	console.dir(window);
		

	onclick = 이벤트 핸들러 함수
	
선택한 요소.on이벤트명 = 이벤트 핸들러 함수


태그 안에 on이벤트명='이벤트 핸들러'
	
	

setTimeout(function() {
	// 실행 부분
}, 지연시간);

setInterval(function() {
	// 실행 부분
}, 반복 지연시간);

이벤트 -> 비동기


만든 함수가 무거운 작업 

setTimeout(function() {
	무거운 작업 함수 
}, 0);