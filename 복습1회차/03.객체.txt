1. 
속성과 메서드
{
	속성 : 값(정수, 문자, 실수...논리값,,, 객체( + 함수 객체)
}

{
	속성 : 값,
	속성 : 값, 
}

객체 리터럴 
Object 생성자
const a = {}; // new Object();

Object.assign

생성자 
	- prototype 
				- constructor  -> 생성자를 만들수 있는 속성 
				- __proto__ -> 링커 -> 상위 객체의 링크 연결(객체간 참조를 통해 상속이 이뤄진다)
				
				
생성자 -> 함수 객체 
-> 인스턴스 생성 
인스턴스 --> __proto___ -> 생성자(함수 객체). prototype, 인스턴스는 생성자를 상속 받은 관계 


				
생성자 -> .prototype.메서드 = function () {

}


/// Abc.prototype.contructor
function Abc() {
	this.a = 10;
	this.b = 20; 
}

/// Abc.prototype.method 
Abc.prototype.method = function() {

}

const abc = new Abc();
abc 
	- prototype	
			- __proto__ 
						- Abc.prototype 
								- method



자바스크립트 상속 
	- 프로토타입 체인 방식의 객체 상속 
	
	.prototype
		- constructor -> 생성자 함수 일때 만 존재 
		- __proto__ (링커 - 상속되어 있는 상위 객체의 참조)
		
		
		
	상속관계를 설정
	Object.setPrototypeOf 
	
	상속 관계를 체크 
	instanceof 
	Object.getPrototypeOf 
	
	Object.create(상위 객체, {
	
	});
	
	
	
	객체 생성자, 일반 객체 
	
	prototype 
		- constructor - 생성자 
		- __proto__  - 링커(상속관계) -> 상위 객체의 prototype의 참조
		
		
		
		// 함수 객체 - 생성자 
		function Person() {
			this.a = 10; 
			this.b = 20;
		}
		
		Person 
			prototype 
				- constructor 
				- __proto__ <--- Object.prototype의 참조
				
				
		const person = new Person();
			prototype 
				- __proto__ <--- Person.prototype의 참조
				


	
	
	생성자 함수
	function Abc() {
		
	}
		- prototype 
			- constructor - 인스턴스를 생성하는 재료
			- __proto__ - 상속 관계에 있는 객체(prototype)의 주소 참조
			
	const abc = new Abc();
		- prototype 
			__proto__  - Abc.prototype
			
	 
	 
	Object.setProtoTypeOf 
	
	const a = new Person();
	
	Object 생성자
		Obect.create -> 객체 생성 메서드 
						(proto(상위 객체 prototype), 새로 정의할 객체 속성 정의)
						
				속성 : {
					value : 속성의 값(기본자료형 + 객체),
					writable : true|false, - 객체 속성의의 쓰기 권한을 통제,
					enumerable : true|false, - 반복 가능 여부(for, for .. in, forEach ... ),
					configurable : true|false, - 삭제 가능 여부, 설정을 변경(wriable : true -> false),
					set 함수() { -> setter 
					
					},
					get 함수(....) { -> getter 
					
					}
				}
				
			
			Object.freeze() - 객체 동결 - 속성의 삭제, 추가, 수정, 변경 불가
			
			Object.seal() -> 객체 밀봉 -> 속성의 삭제, 추가 X, 수정 가능 
			
			
			class 구문 형태의 생성자
			
			class 클래스명 {
				constructor(....) {
				
				}
			}
		
			function 생성자(....) {
			
			}
	