정규표현식
	RegExp 생성자
		/패턴/ -> new RegExp(... ) RegExp 인스턴스
			RegExp.prototype
						.test(패턴) -> 패턴의 일치 여부(true|false)
						.exec(패턴) -> 패턴에 일치하는 문자열 정보
			
			
		/abc/ -> abc라는 문자열이 포함되어 있는지 여부 
		[] -> 문자 클래스 -> 각각의 문자 
		[abc] -> a 또는 b 또는 c가 포함되어 있는지
		/[abcdefg....z]/ -> /[a-z]/
		/[01234...9]/ -> /[0-9]/
		
		[01234] -> 0, 1, 2, 3, 4 가 포함 
		/01234/ -> 01234가 포함 
		[^abc] -> a,b,c가 아닌 문자 
		/^abc/ -> abc로 시작하는 문자패턴
		/abc$/ -> abc로 끝나는 문자 패턴
		
		
		. -> (줄 개행문자 \n를 제외한)모든 문자 한개, ... -> 모든 문자 3개
		/[0-9]/ ->숫자 매칭 패턴   ---  \d -> /[\d]/
		/[^0-9]/ -> 숫자가 아닌 패턴 -- \D -> 숫자가 아닌 패턴 
		
		\s -> 공백 
		\S -> 공백이 아닌 모든 문자  
		
		\w -> 알파벳,숫자, _(언더스코어) 한개 
		\W -> 알파벳, 숫자, _(언더스코어)를 제외한 모든 문자 
		
		{} -> 반복 범위 
		문자{시작, 종료}
		문자{2,5}-> 문자가 2이상 5이하 반복
		문자{2,} -> 문자가 2이상 반복
		문자{,2} -> 문자가 2이하 반복 
		문자{숫자} -> 문자가 숫자만큼 반복
							문자{3} -> 문자 패턴이 3만큼 반복 
							
		문자? -> 문자{0,1} -> 문자를 1번 이하 반복(문자가 있어도 되고 없어도 되고)
		문자* -> 문자{0,} -> 문자를 0번 이상 반복(있어도 되고 없어도 되고, 여러개도 가능)
		문자+ -> 문자{1,} -> 문자를 1번 이상 반복(반드시 1개는 있어야 한다)
		
		문자1|문자2|문자3 -> 문자1 또는 문자2 또는 문자3 
		
		(패턴) -> 서브 패턴 -> 특정 패턴을 그룹화 해서 추출 (exec)
		
		정규표현식 플래스
		i -> 대소문자 구분 X  /[a-z]/i -> /[a-zA-Z]/
		g -> 전역 검색( 처음 검색 매칭 뿐 아니라 일치하는 모든 것을 처리)
		m -> 줄 개행 문자를 만나더라도 여러줄 모드로 검색 
		
		a태그 href='링크...'
		
		<a 속성.... href='링크...'  class=.... id=...  기타 속성...>텍스트</a>
		
		/<a.+href=['"]?([^'">]+)['"]?[^>]*>/igm
		
		RegExp.prototype.exec -> 매칭된 위치에 정지 
									-> 실행을 반복할때마다 다음 패턴 매칭 -> 정지 -> 반복 
									
									-> 더이상 매칭되는 패턴이 없는 경우 -> exec -> null 값 반환 
									-> RegExp 인스턴스.lastIndex 번호가 0 
									
		img 태그의 src="이미지 경로" ... 
		<img 속성.... src="이미지경로" 속성....>
		/<img.+src=['"]?([^'">]+)['"]?[^>]*>/igm
		
		
		10번 